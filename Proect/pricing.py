# pricing.py

import re
import math
from openpyxl.styles import Font, Alignment, PatternFill
from config import DARK_RED, LIGHT_YELLOW
import logging

logger = logging.getLogger(__name__)

def extract_thickness_value(text, keyword):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    try:
        pattern = re.compile(rf"{re.escape(keyword)}[^\d]*([\d,\.]+)")
        matches = pattern.findall(str(text).lower())
        if matches:
            value = float(matches[-1].replace(',', '.'))
            logger.debug(f"üìè –ò–∑–≤–ª–µ—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–ª—â–∏–Ω—ã: {value}")
            return value
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–æ–ª—â–∏–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞: {text}, –æ—à–∏–±–∫–∞: {e}")
    return None


def find_closest_price_data(price_ws, thickness):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ–ª—â–∏–Ω—ã"""
    closest_data = None
    min_diff = float('inf')
    for row in price_ws.iter_rows(min_row=2):
        try:
            current_thickness = float(row[0].value)
            diff = abs(current_thickness - thickness)
            if diff < min_diff:
                min_diff = diff
                closest_data = {
                    'C': float(row[2].value) if row[2].value else 0,  # –¶–µ–Ω–∞ –∑–∞ –∫–æ–Ω—Ç—É—Ä
                    'D': float(row[3].value) if row[3].value else 0   # –¶–µ–Ω–∞ –∑–∞ –º–µ—Ç—Ä —Ä–µ–∑–∫–∏
                }
        except (ValueError, TypeError):
            continue
    logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã: {thickness}")
    return closest_data


def calculate_prices_for_section(ws, price_ws, section_row, next_section_row):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö ID –≤ —Å–µ–∫—Ü–∏–∏"""
    logger.info(f"üí∞ –†–∞—Å—Å—á—ë—Ç —Ü–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏ –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ {section_row}")
    # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–Ω–∫–∏ –∏ logistics cost –¥–ª—è —Å–µ–∫—Ü–∏–∏
    thickness = None
    logistics_cost = 0

    # –ò—â–µ–º logistics cost –≤ —Å—Ç—Ä–æ–∫–µ —Å–µ–∫—Ü–∏–∏
    for cell in ws[section_row]:
        if cell.value and isinstance(cell.value, str) and "Logistics Cost:" in cell.value:
            try:
                logistics_cost = float(re.search(r'Logistics Cost:\s*([\d\.]+)', cell.value).group(1))
                logger.debug(f"üöö Logistics Cost –Ω–∞–π–¥–µ–Ω: {logistics_cost}")
            except (AttributeError, ValueError) as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ Logistics Cost: {e}")
                logistics_cost = 0

    # –ò—â–µ–º —Ç–æ–ª—â–∏–Ω—É —Å—Ç–µ–Ω–∫–∏
    for cell in ws[section_row]:
        if cell.value and isinstance(cell.value, str):
            for keyword in ["—Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏", "—Å—Ä–µ–¥–Ω—è—è —Ç–æ–ª—â–∏–Ω–∞ –Ω–æ–≥–∏", "—Ç–æ–ª—â–∏–Ω–∞"]:
                value = extract_thickness_value(cell.value, keyword)
                if value is not None:
                    thickness = value
                    break
        if thickness is not None:
            break

    if thickness is None or price_ws is None:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—â–∏–Ω–∞ –∏–ª–∏ Price Data –¥–ª—è —Å–µ–∫—Ü–∏–∏ –≤ —Å—Ç—Ä–æ–∫–µ {section_row}")
        return None

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Price Data
    price_data = find_closest_price_data(price_ws, thickness)
    if not price_data:
        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–ª—â–∏–Ω—ã {thickness}")
        return None

    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
    headers = {}
    for cell in ws[section_row + 1]:
        if cell.value in ["ID", "Part Name", "Qty", "Part Length(mm)", "Contour Qty", "Cut Length(mm)", "Price(‚ÇΩ)"]:
            headers[cell.value] = cell.column

    if not all(key in headers for key in ["ID", "Qty", "Part Length(mm)", "Contour Qty", "Cut Length(mm)", "Price(‚ÇΩ)"]):
        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤")
        return None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Total Length –¥–ª—è —Å–µ–∫—Ü–∏–∏
    total_length = 0
    for row in range(section_row + 2, next_section_row + 1):
        part_length_cell = ws.cell(row=row, column=headers["Part Length(mm)"])
        qty_cell = ws.cell(row=row, column=headers["Qty"])
        try:
            part_length = float(part_length_cell.value) if part_length_cell.value else 0
            qty = float(qty_cell.value) if qty_cell.value else 0
            total_length += part_length * qty
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ total_length: {e}")
            continue

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ ID –∏ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∫—Ü–∏–∏
    total_price_section = 0
    for row in range(section_row + 2, next_section_row + 1):
        id_cell = ws.cell(row=row, column=headers["ID"])
        if not id_cell.value:
            continue
        try:
            qty = float(ws.cell(row=row, column=headers["Qty"]).value) if ws.cell(row=row, column=headers["Qty"]).value else 0
            part_length = float(ws.cell(row=row, column=headers["Part Length(mm)"]).value) if ws.cell(row=row, column=headers["Part Length(mm)"]).value else 0
            contour_qty = float(ws.cell(row=row, column=headers["Contour Qty"]).value) if ws.cell(row=row, column=headers["Contour Qty"]).value else 0
            cut_length = float(ws.cell(row=row, column=headers["Cut Length(mm)"]).value) if ws.cell(row=row, column=headers["Cut Length(mm)"]).value else 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ü–µ–Ω—ã
            contour_cost = contour_qty * price_data['C']
            cut_cost = cut_length / 1000 * price_data['D']
            logistics_part = part_length / total_length * logistics_cost if total_length > 0 else 0

            # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
            price = contour_cost + cut_cost + logistics_part
            ws.cell(row=row, column=headers["Price(‚ÇΩ)"], value=round(price, 2))

            # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–µ–∫—Ü–∏–∏
            total_price_section += price * qty
        except (ValueError, TypeError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ü–µ–Ω—ã –¥–ª—è ID {id_cell.value}: {str(e)}")
            ws.cell(row=row, column=headers["Price(‚ÇΩ)"], value="ERROR")

    logger.info(f"‚úÖ –¶–µ–Ω—ã –¥–ª—è —Å–µ–∫—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price_section:.2f}")
    return round(total_price_section, 2)